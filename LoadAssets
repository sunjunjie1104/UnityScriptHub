using RenderHeads.Media.AVProVideo;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using TouchScript.Gestures;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class LoadAssets : MonoBehaviour
{
    public static LoadAssets INS;
    public GameObject Panel_加载界面, G_PRE_MP;
    public Text Text_提示文本, Text_加载进度;
    string ST_加载完成后要进入的场景名称 = "Scene_Main";
    public int Int_加载总进度, Int_资源总数;
    bool IS_临时用1, IS_临时用2, Is_正在加载资源中;
    float F_加载总用时;


    //单个文件夹下的所有图片
    public List<Texture2D> List_TEX_已加载的图片组1 = new List<Texture2D>();
    public List<Texture2D> List_TEX_已加载的图片组2 = new List<Texture2D>();

    //多个文件夹下的所有图片  分别存到list
    public List<C_List图文字典_TEX> List_已加载的图文字典List_TEX_1 = new List<C_List图文字典_TEX>();
    public List<C_List图文字典_TEX> List_已加载的图文字典List_TEX_2 = new List<C_List图文字典_TEX>();




    //单个文件夹下的所有音频
    public List<AudioClip> List_AUD_已加载的音频组1 = new List<AudioClip>();
    public List<AudioClip> List_AUD_已加载的音频组2 = new List<AudioClip>();
    //多个文件夹下的所有音频  分别存到list
    public List<C_List音文字典_AUD> List_已加载的音文字典List_AUD_1 = new List<C_List音文字典_AUD>();
    public List<C_List音文字典_AUD> List_已加载的音文字典List_AUD_2 = new List<C_List音文字典_AUD>();




    //单个文件夹下的所有音频
    public List<MediaPlayer> List_MP_已加载的视频组1 = new List<MediaPlayer>();
    public List<MediaPlayer> List_MP_已加载的视频组2 = new List<MediaPlayer>();
    //多个文件夹下的所有音频  分别存到list
    public List<C_List视频字典_MP> List_已加载的视频字典List_MP1 = new List<C_List视频字典_MP>();
    public List<C_List视频字典_MP> List_已加载的视频字典List_MP2 = new List<C_List视频字典_MP>();


    void Awake()
    {
        if (INS == null) { INS = this; DontDestroyOnLoad(this.gameObject); } else { Destroy(this.gameObject); }
    }

    void Start()
    {
        //StartCoroutine(IE_IOLoadAssets_获取某文件夹下的所有图片("/示例图1", List_TEX_已加载的图片组1));





        // StartCoroutine(IE_IOLoadAssets_获取某文件夹下的所有图片("/照片墙相关/出口", List_TEX_已加载的图片组1));
        // StartCoroutine(IE_IOLoadAssets_获取某文件夹下的所有文件夹的图片并分组存到list("/照片墙相关", List_已加载的图文字典List_TEX_1));


        // StartCoroutine(IE_IOLoadAssets_获取某文件夹下的所有音频("/音频示例/1", List_AUD_已加载的音频组1));
        //StartCoroutine(IE_IOLoadAssets_获取某文件夹下的所有文件夹的音频并分组存到list("/音频示例", List_已加载的音文字典List_AUD_1));

        //StartCoroutine(IE_IOLoadAssets_获取某文件夹下的所有视频("/AVProVideoSamples", List_MP_已加载的视频组1));
        //StartCoroutine(IE_IOLoadAssets_获取某文件夹下的所有文件夹内视频并分组存到list("/MOV",List_已加载的视频字典List_MP1));


    }

    void Update()
    {

        if (Int_资源总数 > 0)
        {
            Is_正在加载资源中 = true;
            F_加载总用时 += Time.deltaTime;
        }
        else
        {
            if (IS_临时用2 == false)
            {
                print("未加载资源");
                Text_提示文本.text = "";
                Text_加载进度.text = "";

                Is_正在加载资源中 = false;
                StartCoroutine(IE_加载完成后(0));
                IS_临时用2 = true;
            }

        }

        if (Is_正在加载资源中)
        {
            Text_加载进度.text = ((int)(((float)Int_加载总进度 / (float)Int_资源总数) * 100)).ToString() + "%";
            if (Int_加载总进度 == Int_资源总数)
            {
                Text_提示文本.text = "加载完成";

                if (IS_临时用1 == false)
                {
                    Is_正在加载资源中 = false;
                    print("加载总用时" + F_加载总用时);
                    StartCoroutine(IE_加载完成后(0.5f));
                    IS_临时用1 = true;
                }
            }
            else
            {
                Text_提示文本.text = "加载资源中…";
            }
        }

    }


    #region 加载图片

    IEnumerator IE_IOLoadAssets_获取某文件夹下的所有图片(string 路径, List<Texture2D> LISTTEX)
    {

        string Texture_filePath = Application.streamingAssetsPath + 路径;
        var result = Directory.GetFiles(Texture_filePath);
        string[] filePaths = result.Where(item => item.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) || item.EndsWith(".png", StringComparison.OrdinalIgnoreCase) || item.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase)).ToArray();

        int Int_此路径的资源总数 = filePaths.Length;
        int int_此路径资源加载进度 = 0;
        Int_资源总数 += Int_此路径的资源总数;

        WaitForEndOfFrame waitForEndOfFrame = new WaitForEndOfFrame();

        for (int i = 0; i < Int_此路径的资源总数; i++)
        {

            string filePath = filePaths[i];
            string ST_图片文件名 = Path.GetFileNameWithoutExtension(filePath);

            byte[] bytes = File.ReadAllBytes(filePaths[i]);
            Texture2D texture = new Texture2D(1, 1);
            texture.LoadImage(bytes);
            texture.name = ST_图片文件名;
            LISTTEX.Add(texture);
            int_此路径资源加载进度 = i + 1;
            Int_加载总进度 += 1;
            yield return waitForEndOfFrame;
        }

        Tools_SJJ.INS.对List内元素进行数字排序(LISTTEX, entry => entry.name);

    }


    [Serializable]
    public class C_List图文字典_TEX
    {
        public string ST_文件夹名;
        public List<Texture2D> List_TEX;
    }
    IEnumerator IE_IOLoadAssets_获取某文件夹下的所有文件夹的图片并分组存到list(string 路径, List<C_List图文字典_TEX> c_List图文字典_sp)
    {
        Text_提示文本.text = "加载资源中……";

        // 获取主文件夹路径
        string mainFolderPath = Application.streamingAssetsPath + 路径;

        // 获取所有子文件夹路径
        string[] subDirectories = Directory.GetDirectories(mainFolderPath);


        // 遍历每个子文件夹
        for (int i = 0; i < subDirectories.Length; i++)
        {
            string subDir = subDirectories[i];

            // 创建一个新的 C_List图文字典_SP 对象来存储当前子文件夹的图片
            C_List图文字典_TEX c_list图文字典 = new C_List图文字典_TEX
            {
                ST_文件夹名 = Path.GetFileName(subDir), // 存储文件夹名称
                List_TEX = new List<Texture2D>()
            };

            // 获取当前子文件夹内的图片文件
            string[] filePaths = Directory.GetFiles(subDir)
                .Where(file => file.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) ||
                               file.EndsWith(".png", StringComparison.OrdinalIgnoreCase) ||
                               file.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase))
                .ToArray();
            Int_资源总数 += filePaths.Length;

            WaitForEndOfFrame waitForEndOfFrame = new WaitForEndOfFrame();

            // 遍历当前子文件夹中的每个图片文件
            for (int j = 0; j < filePaths.Length; j++)
            {
                string filePath = filePaths[j];

                // 读取文件名并去掉扩展名
                string fileName = Path.GetFileNameWithoutExtension(filePath);

                // 读取图片并转换为 Sprite
                byte[] bytes = File.ReadAllBytes(filePath);
                Texture2D texture = new Texture2D(1, 1);
                texture.LoadImage(bytes);

                // 将图片名称和 Sprite 添加到当前子文件夹的列表中
                texture.name = fileName;
                c_list图文字典.List_TEX.Add(texture);

                 
                Int_加载总进度 += 1;
                yield return waitForEndOfFrame;
            }

            // 将当前子文件夹的 C_List图文字典_SP 对象添加到主列表中
            c_List图文字典_sp.Add(c_list图文字典);
        }

        // 对主列表中的文件夹按照文件夹名称中的数字顺序排序
        Tools_SJJ.INS.对List内元素进行数字排序(c_List图文字典_sp, entry => entry.ST_文件夹名);

        // 对每个子文件夹内的图片名称列表进行排序
        foreach (var folder in c_List图文字典_sp)
        {
            Tools_SJJ.INS.对List内元素进行数字排序(folder.List_TEX, name => name.name);
        }

    }




    #endregion



    #region 加载音频

    IEnumerator IE_IOLoadAssets_获取某文件夹下的所有音频(string ST_路径, List<AudioClip> ListAUD)
    {
        Text_提示文本.text = "加载资源中……";
        string audioFilePath = Application.streamingAssetsPath + ST_路径;
        var result = Directory.GetFiles(audioFilePath);
        string[] filePaths = result.Where(item => item.EndsWith(".mp3", StringComparison.OrdinalIgnoreCase) || item.EndsWith(".wav", StringComparison.OrdinalIgnoreCase)).ToArray();

        int Int_此路径的资源总数 = filePaths.Length;
        int int_此路径资源加载进度 = 0;
        Int_资源总数 += Int_此路径的资源总数;

        WaitForEndOfFrame waitForEndOfFrame = new WaitForEndOfFrame();

        for (int i = 0; i < Int_此路径的资源总数; i++)
        {
            string filePath = filePaths[i];
            string ST_音频文件名 = Path.GetFileNameWithoutExtension(filePath);
            string ST_扩展名 = Path.GetExtension(filePath).ToLower();
            AudioType audioType = AudioType.UNKNOWN;

            switch (ST_扩展名)
            {
                case ".mp3":
                    audioType = AudioType.MPEG;
                    break;
                case ".wav":
                    audioType = AudioType.WAV;
                    break;

            }

            using (UnityWebRequest request = UnityWebRequestMultimedia.GetAudioClip("file://" + filePath, audioType))
            {
                yield return request.SendWebRequest();

                if (request.result == UnityWebRequest.Result.ConnectionError || request.result == UnityWebRequest.Result.ProtocolError)
                {
                    Debug.LogError("Error loading audio: " + request.error);
                }
                else
                {
                    AudioClip audioClip = DownloadHandlerAudioClip.GetContent(request);

                    audioClip.name = ST_音频文件名;
                    ListAUD.Add(audioClip);

                    int_此路径资源加载进度 = i + 1;
                    Int_加载总进度 += 1;
                    yield return waitForEndOfFrame;
                }
            }
        }

        Tools_SJJ.INS.对List内元素进行数字排序(ListAUD, entry => entry.name);
    }




    [Serializable]
    public class C_List音文字典_AUD
    {
        public string ST_文件夹名;
        public List<AudioClip> List_AUD;
    }

    IEnumerator IE_IOLoadAssets_获取某文件夹下的所有文件夹的音频并分组存到list(string 路径, List<C_List音文字典_AUD> c_List音文字典_aud)
    {

        // 获取主文件夹路径
        string mainFolderPath = Application.streamingAssetsPath + 路径;

        // 获取所有子文件夹路径
        string[] subDirectories = Directory.GetDirectories(mainFolderPath);

        // 遍历每个子文件夹
        for (int i = 0; i < subDirectories.Length; i++)
        {
            string subDir = subDirectories[i];

            // 创建一个新的 C_List音频字典_AUD 对象来存储当前子文件夹的音频
            C_List音文字典_AUD c_list音频字典 = new C_List音文字典_AUD
            {
                ST_文件夹名 = Path.GetFileName(subDir), // 存储文件夹名称

                List_AUD = new List<AudioClip>()
            };

            string[] filePaths = Directory.GetFiles(subDir).Where(file => file.EndsWith(".mp3", StringComparison.OrdinalIgnoreCase) || file.EndsWith(".wav", StringComparison.OrdinalIgnoreCase)).ToArray();

            Int_资源总数 += filePaths.Length;

            WaitForEndOfFrame waitForEndOfFrame = new WaitForEndOfFrame();


            // 遍历当前子文件夹中的每个音频文件
            for (int j = 0; j < filePaths.Length; j++)
            {
                string filePath = filePaths[j];

                // 读取文件名并去掉扩展名
                string fileName = Path.GetFileNameWithoutExtension(filePath);
                string extension = Path.GetExtension(filePath).ToLower();
                AudioType audioType = AudioType.UNKNOWN;

                switch (extension)
                {
                    case ".mp3":
                        audioType = AudioType.MPEG;
                        break;
                    case ".wav":
                        audioType = AudioType.WAV;
                        break;

                }

                using (UnityWebRequest request = UnityWebRequestMultimedia.GetAudioClip("file://" + filePath, audioType))
                {
                    yield return request.SendWebRequest();

                    if (request.result == UnityWebRequest.Result.ConnectionError || request.result == UnityWebRequest.Result.ProtocolError)
                    {
                        Debug.LogError("Error loading audio: " + request.error);
                    }
                    else
                    {
                        AudioClip audioClip = DownloadHandlerAudioClip.GetContent(request);
                        audioClip.name = fileName;
                        c_list音频字典.List_AUD.Add(audioClip);
                        Int_加载总进度 += 1;
                        yield return waitForEndOfFrame;
                    }
                }
            }

            // 将当前子文件夹的 C_List音频字典_AUD 对象添加到主列表中
            c_List音文字典_aud.Add(c_list音频字典);
        }

        // 对主列表中的文件夹按照文件夹名称中的数字顺序排序
        Tools_SJJ.INS.对List内元素进行数字排序(c_List音文字典_aud, entry => entry.ST_文件夹名);

        // 对每个子文件夹内的音频名称列表进行排序
        foreach (var folder in c_List音文字典_aud)
        {
            Tools_SJJ.INS.对List内元素进行数字排序(folder.List_AUD, name => name.name);
        }
    }

    #endregion



    #region 加载视频

    IEnumerator IE_IOLoadAssets_获取某文件夹下的所有视频(string 路径, List<MediaPlayer> ListMP)
    {
        Text_提示文本.text = "加载资源中……";
        string videoFilePath = Application.streamingAssetsPath + 路径;
        var result = Directory.GetFiles(videoFilePath);
        string[] filePaths = result.Where(item => item.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase) ||
                                                  item.EndsWith(".avi", StringComparison.OrdinalIgnoreCase) ||
                                                  item.EndsWith(".mov", StringComparison.OrdinalIgnoreCase)).ToArray();

        int Int_此路径的资源总数 = filePaths.Length;
        Int_资源总数 += Int_此路径的资源总数;
        WaitForEndOfFrame waitForEndOfFrame = new WaitForEndOfFrame();

        for (int i = 0; i < Int_此路径的资源总数; i++)
        {
            string filePath = filePaths[i];
            string fileName = Path.GetFileNameWithoutExtension(filePath);

            if (!string.IsNullOrEmpty(filePath))
            {
                // 将文件路径格式化为相对路径，并替换反斜杠为正斜杠
                string relativePath = filePath.Replace(Application.streamingAssetsPath + "/", "").Replace("\\", "/");
                GameObject go = Instantiate(G_PRE_MP, transform);
                go.GetComponent<MediaPlayer>().OpenMedia(new MediaPath(relativePath, MediaPathType.RelativeToStreamingAssetsFolder), autoPlay: false);
                go.GetComponent<MediaPlayer>().name = fileName;
                List_MP_已加载的视频组1.Add(go.GetComponent<MediaPlayer>());
            }

            Int_加载总进度 += 1;
            yield return waitForEndOfFrame;
        }

        // 对视频列表进行排序
        Tools_SJJ.INS.对List内元素进行数字排序(List_MP_已加载的视频组1, entry => entry.name);
    }






    [Serializable]
    public class C_List视频字典_MP
    {
        public string ST_文件夹名;
        public List<string> List_ST_视频名;
        public List<MediaPlayer> List_MP;
    }

    IEnumerator IE_IOLoadAssets_获取某文件夹下的所有文件夹内视频并分组存到list(string 路径, List<C_List视频字典_MP> list_c_MP)
    {

        // 获取主文件夹路径
        string mainFolderPath = Application.streamingAssetsPath + 路径;

        // 获取所有子文件夹路径
        string[] subDirectories = Directory.GetDirectories(mainFolderPath);

        if (subDirectories.Length == 0)
        {
            print(路径 + "没有子文件夹");
            yield break;
        }

        // 遍历每个子文件夹
        for (int i = 0; i < subDirectories.Length; i++)
        {
            string subDir = subDirectories[i];

            // 创建一个新的 C_List视频字典_AUD 对象来存储当前子文件夹的视频
            C_List视频字典_MP c_list视频字典 = new C_List视频字典_MP
            {
                ST_文件夹名 = Path.GetFileName(subDir), // 存储文件夹名称
                List_ST_视频名 = new List<string>(),
                List_MP = new List<MediaPlayer>()
            };

            // 获取当前子文件夹内的视频文件
            string[] filePaths = Directory.GetFiles(subDir)
                .Where(file => file.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase) ||
                               file.EndsWith(".avi", StringComparison.OrdinalIgnoreCase) ||
                               file.EndsWith(".mov", StringComparison.OrdinalIgnoreCase))
                .ToArray();
            Int_资源总数 += filePaths.Length;

            WaitForEndOfFrame waitForEndOfFrame = new WaitForEndOfFrame();

            // 遍历当前子文件夹中的每个视频文件
            for (int j = 0; j < filePaths.Length; j++)
            {
                string filePath = filePaths[j];

                // 读取文件名并去掉扩展名
                string fileName = Path.GetFileNameWithoutExtension(filePath);
                if (!string.IsNullOrEmpty(filePath))
                {
                    // 将文件路径格式化为相对路径，并替换反斜杠为正斜杠
                    string relativePath = filePath.Replace(Application.streamingAssetsPath + "/", "").Replace("\\", "/");
                    GameObject go = Instantiate(G_PRE_MP, transform);
                    go.GetComponent<MediaPlayer>().OpenMedia(new MediaPath(relativePath, MediaPathType.RelativeToStreamingAssetsFolder), autoPlay: false);
                    c_list视频字典.List_ST_视频名.Add(fileName);
                    go.GetComponent<MediaPlayer>().name = fileName;
                   c_list视频字典.List_MP.Add(go.GetComponent<MediaPlayer>());
                }

                Int_加载总进度 += 1;
                yield return waitForEndOfFrame;
            }

            // 将当前子文件夹的 C_List视频字典_AUD 对象添加到主列表中
            List_已加载的视频字典List_MP1.Add(c_list视频字典);
        }

        // 对主列表中的文件夹按照文件夹名称中的数字顺序排序
        Tools_SJJ.INS.对List内元素进行数字排序(List_已加载的视频字典List_MP1, entry => entry.ST_文件夹名);

        // 对每个子文件夹内的视频名称列表进行排序
        foreach (var folder in List_已加载的视频字典List_MP1)
        {
            Tools_SJJ.INS.对List内元素进行数字排序(folder.List_ST_视频名, name => name);
        }
    }

    #endregion




    IEnumerator IE_加载完成后(float F_延时)
    {

        yield return new WaitForSeconds(F_延时);
        Panel_加载界面.gameObject.SetActive(false);
        SceneManager.LoadScene(ST_加载完成后要进入的场景名称);

    }




}

